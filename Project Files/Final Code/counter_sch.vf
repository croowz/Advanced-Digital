////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : counter_sch.vf
// /___/   /\     Timestamp : 03/21/2018 17:54:20
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog E:/ALU-8bit-lab2/counter_sch.vf -w E:/ALU-8bit-lab2/counter_sch.sch
//Design Name: counter_sch
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module mux_MUSER_counter_sch(in0, 
                             in1, 
                             sel, 
                             mux_out);

    input in0;
    input in1;
    input sel;
   output mux_out;
   
   wire XLXN_2;
   wire XLXN_5;
   wire XLXN_6;
   
   AND2  XLXI_1 (.I0(XLXN_2), 
                .I1(in0), 
                .O(XLXN_5));
   OR2  XLXI_2 (.I0(XLXN_6), 
               .I1(XLXN_5), 
               .O(mux_out));
   AND2  XLXI_3 (.I0(in1), 
                .I1(sel), 
                .O(XLXN_6));
   INV  XLXI_4 (.I(sel), 
               .O(XLXN_2));
endmodule
`timescale 1ns / 1ps

module mux8_sch_MUSER_counter_sch(in0, 
                                  in1, 
                                  sel, 
                                  mux_out);

    input [7:0] in0;
    input [7:0] in1;
    input sel;
   output [7:0] mux_out;
   
   
   mux_MUSER_counter_sch  XLXI_1 (.in0(in0[0]), 
                                 .in1(in1[0]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[0]));
   mux_MUSER_counter_sch  XLXI_2 (.in0(in0[1]), 
                                 .in1(in1[1]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[1]));
   mux_MUSER_counter_sch  XLXI_3 (.in0(in0[2]), 
                                 .in1(in1[2]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[2]));
   mux_MUSER_counter_sch  XLXI_4 (.in0(in0[3]), 
                                 .in1(in1[3]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[3]));
   mux_MUSER_counter_sch  XLXI_5 (.in0(in0[4]), 
                                 .in1(in1[4]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[4]));
   mux_MUSER_counter_sch  XLXI_6 (.in0(in0[5]), 
                                 .in1(in1[5]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[5]));
   mux_MUSER_counter_sch  XLXI_7 (.in0(in0[6]), 
                                 .in1(in1[6]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[6]));
   mux_MUSER_counter_sch  XLXI_8 (.in0(in0[7]), 
                                 .in1(in1[7]), 
                                 .sel(sel), 
                                 .mux_out(mux_out[7]));
endmodule
`timescale 1ns / 1ps

module ha_sch_MUSER_counter_sch(Ci, 
                                Xi, 
                                Cout, 
                                S);

    input Ci;
    input Xi;
   output Cout;
   output S;
   
   
   AND2  XLXI_1 (.I0(Xi), 
                .I1(Ci), 
                .O(Cout));
   XOR2  XLXI_2 (.I0(Xi), 
                .I1(Ci), 
                .O(S));
endmodule
`timescale 1ns / 1ps

module ha8_sch_MUSER_counter_sch(HA_IN, 
                                 HA_OUT);

    input [7:0] HA_IN;
   output [7:0] HA_OUT;
   
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   
   ha_sch_MUSER_counter_sch  XLXI_2 (.Ci(XLXN_16), 
                                    .Xi(HA_IN[2]), 
                                    .Cout(XLXN_15), 
                                    .S(HA_OUT[2]));
   ha_sch_MUSER_counter_sch  XLXI_3 (.Ci(HA_IN[0]), 
                                    .Xi(HA_IN[1]), 
                                    .Cout(XLXN_16), 
                                    .S(HA_OUT[1]));
   ha_sch_MUSER_counter_sch  XLXI_4 (.Ci(XLXN_13), 
                                    .Xi(HA_IN[5]), 
                                    .Cout(XLXN_12), 
                                    .S(HA_OUT[5]));
   ha_sch_MUSER_counter_sch  XLXI_5 (.Ci(XLXN_15), 
                                    .Xi(HA_IN[3]), 
                                    .Cout(XLXN_14), 
                                    .S(HA_OUT[3]));
   ha_sch_MUSER_counter_sch  XLXI_6 (.Ci(XLXN_14), 
                                    .Xi(HA_IN[4]), 
                                    .Cout(XLXN_13), 
                                    .S(HA_OUT[4]));
   ha_sch_MUSER_counter_sch  XLXI_7 (.Ci(XLXN_12), 
                                    .Xi(HA_IN[6]), 
                                    .Cout(XLXN_11), 
                                    .S(HA_OUT[6]));
   ha_sch_MUSER_counter_sch  XLXI_8 (.Ci(XLXN_11), 
                                    .Xi(HA_IN[7]), 
                                    .Cout(), 
                                    .S(HA_OUT[7]));
   INV  XLXI_9 (.I(HA_IN[0]), 
               .O(HA_OUT[0]));
endmodule
`timescale 1ns / 1ps

module reg_sch_MUSER_counter_sch(CLK, 
                                 LOAD, 
                                 REG_IN, 
                                 RST, 
                                 REG_OUT);

    input CLK;
    input LOAD;
    input [7:0] REG_IN;
    input RST;
   output [7:0] REG_OUT;
   
   
   FDRE #( .INIT(1'b0) ) XLXI_3 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[7]), 
                .R(RST), 
                .Q(REG_OUT[7]));
   FDRE #( .INIT(1'b0) ) XLXI_5 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[6]), 
                .R(RST), 
                .Q(REG_OUT[6]));
   FDRE #( .INIT(1'b0) ) XLXI_6 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[5]), 
                .R(RST), 
                .Q(REG_OUT[5]));
   FDRE #( .INIT(1'b0) ) XLXI_7 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[4]), 
                .R(RST), 
                .Q(REG_OUT[4]));
   FDRE #( .INIT(1'b0) ) XLXI_8 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[3]), 
                .R(RST), 
                .Q(REG_OUT[3]));
   FDRE #( .INIT(1'b0) ) XLXI_9 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[2]), 
                .R(RST), 
                .Q(REG_OUT[2]));
   FDRE #( .INIT(1'b0) ) XLXI_10 (.C(CLK), 
                 .CE(LOAD), 
                 .D(REG_IN[1]), 
                 .R(RST), 
                 .Q(REG_OUT[1]));
   FDRE #( .INIT(1'b0) ) XLXI_11 (.C(CLK), 
                 .CE(LOAD), 
                 .D(REG_IN[0]), 
                 .R(RST), 
                 .Q(REG_OUT[0]));
endmodule
`timescale 1ns / 1ps

module counter_sch(CLK, 
                   COUNT, 
                   COUNT_IN, 
                   LOAD, 
                   RST, 
                   COUNT_OUT);

    input CLK;
    input COUNT;
    input [7:0] COUNT_IN;
    input LOAD;
    input RST;
   output [7:0] COUNT_OUT;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_9;
   wire [7:0] XLXN_11;
   wire [7:0] XLXN_12;
   wire [7:0] COUNT_OUT_DUMMY;
   
   assign COUNT_OUT[7:0] = COUNT_OUT_DUMMY[7:0];
   reg_sch_MUSER_counter_sch  XLXI_1 (.CLK(CLK), 
                                     .LOAD(XLXN_2), 
                                     .REG_IN(XLXN_11[7:0]), 
                                     .RST(RST), 
                                     .REG_OUT(COUNT_OUT_DUMMY[7:0]));
   ha8_sch_MUSER_counter_sch  XLXI_2 (.HA_IN(COUNT_OUT_DUMMY[7:0]), 
                                     .HA_OUT(XLXN_12[7:0]));
   mux8_sch_MUSER_counter_sch  XLXI_3 (.in0(COUNT_IN[7:0]), 
                                      .in1(XLXN_12[7:0]), 
                                      .sel(XLXN_1), 
                                      .mux_out(XLXN_11[7:0]));
   AND2  XLXI_4 (.I0(COUNT), 
                .I1(XLXN_9), 
                .O(XLXN_1));
   OR2  XLXI_5 (.I0(COUNT), 
               .I1(LOAD), 
               .O(XLXN_2));
   INV  XLXI_6 (.I(LOAD), 
               .O(XLXN_9));
endmodule
