////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : BypassClk.vf
// /___/   /\     Timestamp : 03/02/2018 15:36:44
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog "C:/Users/rac71636/Documents/GitHub/Advanced-Digital/Project Folder/Xilinx Files/BypassClk.vf" -w C:/Users/rac71636/Desktop/BypassClk.sch
//Design Name: BypassClk
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module clk_signal_sch_MUSER_BypassClk(CLK, 
                                      PUSH, 
                                      SIG);

    input CLK;
    input PUSH;
   output SIG;
   
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire SIG_DUMMY;
   
   assign SIG = SIG_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_1 (.C(CLK), 
              .D(PUSH), 
              .Q(XLXN_3));
   INV  XLXI_2 (.I(XLXN_3), 
               .O(XLXN_4));
   AND2  XLXI_3 (.I0(SIG_DUMMY), 
                .I1(CLK), 
                .O(XLXN_6));
   AND2  XLXI_4 (.I0(XLXN_4), 
                .I1(PUSH), 
                .O(XLXN_5));
   OR2  XLXI_5 (.I0(XLXN_6), 
               .I1(XLXN_5), 
               .O(SIG_DUMMY));
endmodule
`timescale 1ns / 1ps

module BypassClk(CLK, 
                 OVERFLOW, 
                 PUSH, 
                 RESET, 
                 Signalout);

    input CLK;
    input OVERFLOW;
    input PUSH;
    input RESET;
   output Signalout;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_8;
   wire XLXN_12;
   
   clk_signal_sch_MUSER_BypassClk  XLXI_1 (.CLK(CLK), 
                                          .PUSH(PUSH), 
                                          .SIG(XLXN_8));
   OR2  XLXI_2 (.I0(OVERFLOW), 
               .I1(XLXN_1), 
               .O(XLXN_12));
   OR2  XLXI_3 (.I0(XLXN_3), 
               .I1(XLXN_8), 
               .O(Signalout));
   AND2  XLXI_4 (.I0(XLXN_2), 
                .I1(CLK), 
                .O(XLXN_3));
   FDC #( .INIT(1'b0) ) XLXI_5 (.C(CLK), 
               .CLR(RESET), 
               .D(XLXN_12), 
               .Q(XLXN_1));
   INV  XLXI_9 (.I(XLXN_1), 
               .O(XLXN_2));
endmodule
