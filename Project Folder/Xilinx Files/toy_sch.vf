////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : toy_sch.vf
// /___/   /\     Timestamp : 02/16/2018 13:33:48
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog "C:/Users/zad65674/Documents/GitHub/Advanced-Digital/Project Folder/Xilinx Files/toy_sch.vf" -w "C:/Users/zad65674/Documents/GitHub/Advanced-Digital/Project Folder/Xilinx Files/toy_sch.sch"
//Design Name: toy_sch
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module NOR8_MXILINX_toy_sch(I0, 
                            I1, 
                            I2, 
                            I3, 
                            I4, 
                            I5, 
                            I6, 
                            I7, 
                            O);

    input I0;
    input I1;
    input I2;
    input I3;
    input I4;
    input I5;
    input I6;
    input I7;
   output O;
   
   wire dummy;
   wire S0;
   wire S1;
   wire O_DUMMY;
   
   assign O = O_DUMMY;
   (* RLOC = "X0Y0" *) 
   FMAP  I_36_29 (.I1(I0), 
                 .I2(I1), 
                 .I3(I2), 
                 .I4(I3), 
                 .O(S0));
   OR4  I_36_110 (.I0(I0), 
                 .I1(I1), 
                 .I2(I2), 
                 .I3(I3), 
                 .O(S0));
   OR4  I_36_127 (.I0(I4), 
                 .I1(I5), 
                 .I2(I6), 
                 .I3(I7), 
                 .O(S1));
   (* RLOC = "X0Y0" *) 
   FMAP  I_36_138 (.I1(I4), 
                  .I2(I5), 
                  .I3(I6), 
                  .I4(I7), 
                  .O(S1));
   NOR2  I_36_140 (.I0(S0), 
                  .I1(S1), 
                  .O(O_DUMMY));
   (* RLOC = "X0Y1" *) 
   FMAP  I_36_144 (.I1(S0), 
                  .I2(S1), 
                  .I3(dummy), 
                  .I4(dummy), 
                  .O(O_DUMMY));
endmodule
`timescale 1ns / 1ps

module toZERO_sch_MUSER_toy_sch(zero_in, 
                                zero_out);

    input [7:0] zero_in;
   output zero_out;
   
   
   (* HU_SET = "XLXI_1_53" *) 
   NOR8_MXILINX_toy_sch  XLXI_1 (.I0(zero_in[0]), 
                                .I1(zero_in[1]), 
                                .I2(zero_in[2]), 
                                .I3(zero_in[3]), 
                                .I4(zero_in[4]), 
                                .I5(zero_in[5]), 
                                .I6(zero_in[6]), 
                                .I7(zero_in[7]), 
                                .O(zero_out));
endmodule
`timescale 1ns / 1ps

module reg_sch_MUSER_toy_sch(CLK, 
                             LOAD, 
                             REG_IN, 
                             RST, 
                             REG_OUT);

    input CLK;
    input LOAD;
    input [7:0] REG_IN;
    input RST;
   output [7:0] REG_OUT;
   
   
   FDRE #( .INIT(1'b0) ) XLXI_3 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[7]), 
                .R(RST), 
                .Q(REG_OUT[7]));
   FDRE #( .INIT(1'b0) ) XLXI_5 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[6]), 
                .R(RST), 
                .Q(REG_OUT[6]));
   FDRE #( .INIT(1'b0) ) XLXI_6 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[5]), 
                .R(RST), 
                .Q(REG_OUT[5]));
   FDRE #( .INIT(1'b0) ) XLXI_7 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[4]), 
                .R(RST), 
                .Q(REG_OUT[4]));
   FDRE #( .INIT(1'b0) ) XLXI_8 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[3]), 
                .R(RST), 
                .Q(REG_OUT[3]));
   FDRE #( .INIT(1'b0) ) XLXI_9 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[2]), 
                .R(RST), 
                .Q(REG_OUT[2]));
   FDRE #( .INIT(1'b0) ) XLXI_16 (.C(CLK), 
                 .CE(LOAD), 
                 .D(REG_IN[1]), 
                 .R(RST), 
                 .Q(REG_OUT[1]));
   FDRE #( .INIT(1'b0) ) XLXI_17 (.C(CLK), 
                 .CE(LOAD), 
                 .D(REG_IN[0]), 
                 .R(RST), 
                 .Q(REG_OUT[0]));
endmodule
`timescale 1ns / 1ps

module mux_MUSER_toy_sch(IN0, 
                         IN1, 
                         SEL, 
                         MUX_OUT);

    input IN0;
    input IN1;
    input SEL;
   output MUX_OUT;
   
   wire XLXN_7;
   wire XLXN_13;
   wire XLXN_14;
   
   AND2  XLXI_1 (.I0(SEL), 
                .I1(IN0), 
                .O(XLXN_7));
   AND2  XLXI_2 (.I0(IN1), 
                .I1(XLXN_14), 
                .O(XLXN_13));
   OR2  XLXI_3 (.I0(XLXN_13), 
               .I1(XLXN_7), 
               .O(MUX_OUT));
   INV  XLXI_5 (.I(SEL), 
               .O(XLXN_14));
endmodule
`timescale 1ns / 1ps

module mux8sch_MUSER_toy_sch(IN0, 
                             IN1, 
                             SEL, 
                             MUX_OUT);

    input [7:0] IN0;
    input [7:0] IN1;
    input SEL;
   output [7:0] MUX_OUT;
   
   
   mux_MUSER_toy_sch  XLXI_1 (.IN0(IN0[0]), 
                             .IN1(IN1[0]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[0]));
   mux_MUSER_toy_sch  XLXI_2 (.IN0(IN0[1]), 
                             .IN1(IN1[1]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[1]));
   mux_MUSER_toy_sch  XLXI_3 (.IN0(IN0[2]), 
                             .IN1(IN1[2]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[2]));
   mux_MUSER_toy_sch  XLXI_4 (.IN0(IN0[3]), 
                             .IN1(IN1[3]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[3]));
   mux_MUSER_toy_sch  XLXI_5 (.IN0(IN0[4]), 
                             .IN1(IN1[4]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[4]));
   mux_MUSER_toy_sch  XLXI_6 (.IN0(IN0[5]), 
                             .IN1(IN1[5]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[5]));
   mux_MUSER_toy_sch  XLXI_7 (.IN0(IN0[6]), 
                             .IN1(IN1[6]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[6]));
   mux_MUSER_toy_sch  XLXI_8 (.IN0(IN0[7]), 
                             .IN1(IN1[7]), 
                             .SEL(SEL), 
                             .MUX_OUT(MUX_OUT[7]));
endmodule
`timescale 1ns / 1ps

module fa_sch_MUSER_toy_sch(Cprev, 
                            X, 
                            Y, 
                            Cnext, 
                            RES);

    input Cprev;
    input X;
    input Y;
   output Cnext;
   output RES;
   
   wire XLXN_1;
   wire XLXN_6;
   wire XLXN_7;
   
   XOR2  XLXI_3 (.I0(Y), 
                .I1(X), 
                .O(XLXN_1));
   XOR2  XLXI_4 (.I0(Cprev), 
                .I1(XLXN_1), 
                .O(RES));
   OR2  XLXI_5 (.I0(XLXN_7), 
               .I1(XLXN_6), 
               .O(Cnext));
   AND2  XLXI_6 (.I0(XLXN_1), 
                .I1(Cprev), 
                .O(XLXN_6));
   AND2  XLXI_7 (.I0(X), 
                .I1(Y), 
                .O(XLXN_7));
endmodule
`timescale 1ns / 1ps

module alu_sch_MUSER_toy_sch(SEL, 
                             X, 
                             Y, 
                             Cnext, 
                             DATA_OUT);

    input SEL;
    input [7:0] X;
    input [7:0] Y;
   output Cnext;
   output [7:0] DATA_OUT;
   
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   
   fa_sch_MUSER_toy_sch  XLXI_1 (.Cprev(XLXN_33), 
                                .X(X[5]), 
                                .Y(XLXN_59), 
                                .Cnext(XLXN_34), 
                                .RES(DATA_OUT[5]));
   fa_sch_MUSER_toy_sch  XLXI_3 (.Cprev(XLXN_32), 
                                .X(X[6]), 
                                .Y(XLXN_58), 
                                .Cnext(XLXN_33), 
                                .RES(DATA_OUT[6]));
   fa_sch_MUSER_toy_sch  XLXI_4 (.Cprev(SEL), 
                                .X(X[7]), 
                                .Y(XLXN_57), 
                                .Cnext(XLXN_32), 
                                .RES(DATA_OUT[7]));
   fa_sch_MUSER_toy_sch  XLXI_5 (.Cprev(XLXN_34), 
                                .X(X[4]), 
                                .Y(XLXN_60), 
                                .Cnext(XLXN_35), 
                                .RES(DATA_OUT[4]));
   fa_sch_MUSER_toy_sch  XLXI_6 (.Cprev(XLXN_35), 
                                .X(X[3]), 
                                .Y(XLXN_61), 
                                .Cnext(XLXN_36), 
                                .RES(DATA_OUT[3]));
   fa_sch_MUSER_toy_sch  XLXI_7 (.Cprev(XLXN_36), 
                                .X(X[2]), 
                                .Y(XLXN_62), 
                                .Cnext(XLXN_37), 
                                .RES(DATA_OUT[2]));
   fa_sch_MUSER_toy_sch  XLXI_8 (.Cprev(XLXN_37), 
                                .X(X[1]), 
                                .Y(XLXN_63), 
                                .Cnext(XLXN_38), 
                                .RES(DATA_OUT[1]));
   fa_sch_MUSER_toy_sch  XLXI_9 (.Cprev(XLXN_38), 
                                .X(X[0]), 
                                .Y(XLXN_64), 
                                .Cnext(Cnext), 
                                .RES(DATA_OUT[0]));
   XOR2  XLXI_10 (.I0(SEL), 
                 .I1(Y[7]), 
                 .O(XLXN_57));
   XOR2  XLXI_11 (.I0(SEL), 
                 .I1(Y[6]), 
                 .O(XLXN_58));
   XOR2  XLXI_12 (.I0(SEL), 
                 .I1(Y[5]), 
                 .O(XLXN_59));
   XOR2  XLXI_13 (.I0(SEL), 
                 .I1(Y[4]), 
                 .O(XLXN_60));
   XOR2  XLXI_14 (.I0(SEL), 
                 .I1(Y[3]), 
                 .O(XLXN_61));
   XOR2  XLXI_15 (.I0(SEL), 
                 .I1(Y[2]), 
                 .O(XLXN_62));
   XOR2  XLXI_16 (.I0(SEL), 
                 .I1(Y[1]), 
                 .O(XLXN_63));
   XOR2  XLXI_18 (.I0(SEL), 
                 .I1(Y[0]), 
                 .O(XLXN_64));
endmodule
`timescale 1ns / 1ps

module ha_sch_MUSER_toy_sch(Ci, 
                            Xi, 
                            Cout, 
                            S);

    input Ci;
    input Xi;
   output Cout;
   output S;
   
   
   AND2  XLXI_1 (.I0(Xi), 
                .I1(Ci), 
                .O(Cout));
   XOR2  XLXI_2 (.I0(Xi), 
                .I1(Ci), 
                .O(S));
endmodule
`timescale 1ns / 1ps

module ha8_sch_MUSER_toy_sch(HA_IN, 
                             HA_OUT);

    input [7:0] HA_IN;
   output [7:0] HA_OUT;
   
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   
   ha_sch_MUSER_toy_sch  XLXI_1 (.Ci(XLXN_28), 
                                .Xi(HA_IN[7]), 
                                .Cout(), 
                                .S(HA_OUT[7]));
   ha_sch_MUSER_toy_sch  XLXI_2 (.Ci(XLXN_29), 
                                .Xi(HA_IN[6]), 
                                .Cout(XLXN_28), 
                                .S(HA_OUT[6]));
   ha_sch_MUSER_toy_sch  XLXI_3 (.Ci(XLXN_30), 
                                .Xi(HA_IN[5]), 
                                .Cout(XLXN_29), 
                                .S(HA_OUT[5]));
   ha_sch_MUSER_toy_sch  XLXI_4 (.Ci(XLXN_31), 
                                .Xi(HA_IN[4]), 
                                .Cout(XLXN_30), 
                                .S(HA_OUT[4]));
   ha_sch_MUSER_toy_sch  XLXI_5 (.Ci(XLXN_32), 
                                .Xi(HA_IN[3]), 
                                .Cout(XLXN_31), 
                                .S(HA_OUT[3]));
   ha_sch_MUSER_toy_sch  XLXI_6 (.Ci(XLXN_33), 
                                .Xi(HA_IN[2]), 
                                .Cout(XLXN_32), 
                                .S(HA_OUT[2]));
   ha_sch_MUSER_toy_sch  XLXI_7 (.Ci(HA_IN[0]), 
                                .Xi(HA_IN[1]), 
                                .Cout(XLXN_33), 
                                .S(HA_OUT[1]));
   INV  XLXI_22 (.I(HA_IN[0]), 
                .O(HA_OUT[0]));
endmodule
`timescale 1ns / 1ps

module counter_sch_MUSER_toy_sch(CLK, 
                                 COUNT, 
                                 COUNT_IN, 
                                 LOAD, 
                                 RST, 
                                 COUNT_OUT);

    input CLK;
    input COUNT;
    input [7:0] COUNT_IN;
    input LOAD;
    input RST;
   output [7:0] COUNT_OUT;
   
   wire XLXN_1;
   wire [7:0] XLXN_7;
   wire XLXN_8;
   wire XLXN_15;
   wire [7:0] XLXN_52;
   wire [7:0] COUNT_OUT_DUMMY;
   
   assign COUNT_OUT[7:0] = COUNT_OUT_DUMMY[7:0];
   OR2  XLXI_1 (.I0(COUNT), 
               .I1(LOAD), 
               .O(XLXN_15));
   AND2  XLXI_2 (.I0(COUNT), 
                .I1(XLXN_1), 
                .O(XLXN_8));
   INV  XLXI_3 (.I(LOAD), 
               .O(XLXN_1));
   reg_sch_MUSER_toy_sch  XLXI_5 (.CLK(CLK), 
                                 .LOAD(XLXN_15), 
                                 .REG_IN(XLXN_7[7:0]), 
                                 .RST(RST), 
                                 .REG_OUT(COUNT_OUT_DUMMY[7:0]));
   mux8sch_MUSER_toy_sch  XLXI_6 (.IN0(COUNT_IN[7:0]), 
                                 .IN1(XLXN_52[7:0]), 
                                 .SEL(XLXN_8), 
                                 .MUX_OUT(XLXN_7[7:0]));
   ha8_sch_MUSER_toy_sch  XLXI_10 (.HA_IN(COUNT_OUT_DUMMY[7:0]), 
                                  .HA_OUT(XLXN_52[7:0]));
endmodule
`timescale 1ns / 1ps

module Datapath_sch_MUSER_toy_sch(ADDORSUB, 
                                  CLK, 
                                  CL_AC, 
                                  CL_D, 
                                  CL_IR, 
                                  CL_PC, 
                                  COUNT, 
                                  DORPC, 
                                  D_IN, 
                                  LD_AC, 
                                  LD_D, 
                                  LD_IR, 
                                  LD_PC, 
                                  A, 
                                  D_OUT, 
                                  IR, 
                                  ZERO);

    input ADDORSUB;
    input CLK;
    input CL_AC;
    input CL_D;
    input CL_IR;
    input CL_PC;
    input COUNT;
    input DORPC;
    input [7:0] D_IN;
    input LD_AC;
    input LD_D;
    input LD_IR;
    input LD_PC;
   output [7:0] A;
   output [7:0] D_OUT;
   output [7:0] IR;
   output ZERO;
   
   wire [7:0] XLXN_19;
   wire [7:0] XLXN_27;
   wire [7:0] XLXN_30;
   wire [7:0] D_OUT_DUMMY;
   
   assign D_OUT[7:0] = D_OUT_DUMMY[7:0];
   reg_sch_MUSER_toy_sch  XLXI_1 (.CLK(CLK), 
                                 .LOAD(LD_D), 
                                 .REG_IN(D_IN[7:0]), 
                                 .RST(CL_D), 
                                 .REG_OUT(XLXN_30[7:0]));
   reg_sch_MUSER_toy_sch  XLXI_2 (.CLK(CLK), 
                                 .LOAD(LD_IR), 
                                 .REG_IN(D_IN[7:0]), 
                                 .RST(CL_IR), 
                                 .REG_OUT(IR[7:0]));
   counter_sch_MUSER_toy_sch  XLXI_3 (.CLK(CLK), 
                                     .COUNT(COUNT), 
                                     .COUNT_IN(XLXN_30[7:0]), 
                                     .LOAD(LD_PC), 
                                     .RST(CL_PC), 
                                     .COUNT_OUT(XLXN_19[7:0]));
   alu_sch_MUSER_toy_sch  XLXI_5 (.SEL(ADDORSUB), 
                                 .X(D_OUT_DUMMY[7:0]), 
                                 .Y(XLXN_30[7:0]), 
                                 .Cnext(), 
                                 .DATA_OUT(XLXN_27[7:0]));
   mux8sch_MUSER_toy_sch  XLXI_6 (.IN0(XLXN_30[7:0]), 
                                 .IN1(XLXN_19[7:0]), 
                                 .SEL(DORPC), 
                                 .MUX_OUT(A[7:0]));
   reg_sch_MUSER_toy_sch  XLXI_7 (.CLK(CLK), 
                                 .LOAD(LD_AC), 
                                 .REG_IN(XLXN_27[7:0]), 
                                 .RST(CL_AC), 
                                 .REG_OUT(D_OUT_DUMMY[7:0]));
   toZERO_sch_MUSER_toy_sch  XLXI_8 (.zero_in(D_OUT_DUMMY[7:0]), 
                                    .zero_out(ZERO));
endmodule
`timescale 1ns / 1ps

module controller_sch_MUSER_toy_sch(ADD, 
                                    BNZ, 
                                    CLK, 
                                    CLR, 
                                    OVERFLOW, 
                                    RESET, 
                                    STORE, 
                                    SUB, 
                                    ZERO, 
                                    ADDSUB, 
                                    CL, 
                                    CL_AC, 
                                    DORPC, 
                                    LD_AC, 
                                    LD_D, 
                                    LD_IR, 
                                    LD_PC, 
                                    MEM_EN, 
                                    PC_CNT, 
                                    RORW, 
                                    S0, 
                                    S1, 
                                    S2, 
                                    S3, 
                                    S4, 
                                    S5);

    input ADD;
    input BNZ;
    input CLK;
    input CLR;
    input OVERFLOW;
    input RESET;
    input STORE;
    input SUB;
    input ZERO;
   output ADDSUB;
   output CL;
   output CL_AC;
   output DORPC;
   output LD_AC;
   output LD_D;
   output LD_IR;
   output LD_PC;
   output MEM_EN;
   output PC_CNT;
   output RORW;
   output S0;
   output S1;
   output S2;
   output S3;
   output S4;
   output S5;
   
   wire XLXN_9;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_14;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_33;
   wire XLXN_50;
   wire XLXN_54;
   wire XLXN_66;
   wire XLXN_185;
   wire CL_DUMMY;
   wire S0_DUMMY;
   wire S1_DUMMY;
   wire S2_DUMMY;
   wire S4_DUMMY;
   wire LD_D_DUMMY;
   
   assign CL = CL_DUMMY;
   assign LD_D = LD_D_DUMMY;
   assign S0 = S0_DUMMY;
   assign S1 = S1_DUMMY;
   assign S2 = S2_DUMMY;
   assign S4 = S4_DUMMY;
   control  XLXI_1 (.CLK(CLK), 
                   .CLR(CLR), 
                   .OVERFLOW(OVERFLOW), 
                   .RESET(RESET), 
                   .S0(S0_DUMMY), 
                   .S1(S1_DUMMY), 
                   .S2(S2_DUMMY), 
                   .S3(LD_D_DUMMY), 
                   .S4(S4_DUMMY), 
                   .S5(S5));
   OR2  XLXI_2 (.I0(SUB), 
               .I1(ADD), 
               .O(XLXN_50));
   AND2  XLXI_3 (.I0(BNZ), 
                .I1(XLXN_9), 
                .O(XLXN_12));
   INV  XLXI_4 (.I(RESET), 
               .O(XLXN_11));
   INV  XLXI_5 (.I(ZERO), 
               .O(XLXN_9));
   INV  XLXI_7 (.I(XLXN_11), 
               .O(CL_DUMMY));
   OR3  XLXI_8 (.I0(XLXN_12), 
               .I1(STORE), 
               .I2(XLXN_50), 
               .O(XLXN_14));
   AND2  XLXI_9 (.I0(S4_DUMMY), 
                .I1(XLXN_14), 
                .O(XLXN_21));
   AND2  XLXI_10 (.I0(STORE), 
                 .I1(S4_DUMMY), 
                 .O(XLXN_22));
   OR3  XLXI_11 (.I0(XLXN_22), 
                .I1(LD_D_DUMMY), 
                .I2(S1_DUMMY), 
                .O(MEM_EN));
   OR2  XLXI_12 (.I0(XLXN_21), 
                .I1(S1_DUMMY), 
                .O(PC_CNT));
   AND2  XLXI_13 (.I0(S1_DUMMY), 
                 .I1(S1_DUMMY), 
                 .O(LD_IR));
   OR2  XLXI_14 (.I0(XLXN_33), 
                .I1(CL_DUMMY), 
                .O(CL_AC));
   AND2  XLXI_15 (.I0(CLR), 
                 .I1(S2_DUMMY), 
                 .O(XLXN_33));
   AND2  XLXI_16 (.I0(LD_D_DUMMY), 
                 .I1(LD_D_DUMMY), 
                 .O(S3));
   AND2  XLXI_17 (.I0(SUB), 
                 .I1(S4_DUMMY), 
                 .O(ADDSUB));
   AND2  XLXI_18 (.I0(XLXN_50), 
                 .I1(S4_DUMMY), 
                 .O(LD_AC));
   AND2  XLXI_19 (.I0(S4_DUMMY), 
                 .I1(STORE), 
                 .O(XLXN_185));
   AND3  XLXI_20 (.I0(BNZ), 
                 .I1(ZERO), 
                 .I2(S4_DUMMY), 
                 .O(LD_PC));
   NOR2  XLXI_22 (.I0(XLXN_54), 
                 .I1(CL_DUMMY), 
                 .O(DORPC));
   AND2  XLXI_23 (.I0(XLXN_66), 
                 .I1(S4_DUMMY), 
                 .O(XLXN_54));
   OR2  XLXI_24 (.I0(STORE), 
                .I1(BNZ), 
                .O(XLXN_66));
   OR2  XLXI_25 (.I0(S0_DUMMY), 
                .I1(XLXN_185), 
                .O(RORW));
endmodule
`timescale 1ns / 1ps

module toy_sch(CLK, 
               D_IN, 
               OVERFLOW, 
               RESET, 
               ADDR, 
               D_OUT, 
               MEM_EN, 
               RORW, 
               S0, 
               S1, 
               S2, 
               S3, 
               S4, 
               S5);

    input CLK;
    input [7:0] D_IN;
    input OVERFLOW;
    input RESET;
   output [7:0] ADDR;
   output [7:0] D_OUT;
   output MEM_EN;
   output RORW;
   output S0;
   output S1;
   output S2;
   output S3;
   output S4;
   output S5;
   
   wire [7:0] IR;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_26;
   wire XLXN_29;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_59;
   
   controller_sch_MUSER_toy_sch  XLXI_5 (.ADD(IR[0]), 
                                        .BNZ(IR[3]), 
                                        .CLK(CLK), 
                                        .CLR(IR[2]), 
                                        .OVERFLOW(OVERFLOW), 
                                        .RESET(RESET), 
                                        .STORE(IR[4]), 
                                        .SUB(IR[1]), 
                                        .ZERO(XLXN_59), 
                                        .ADDSUB(XLXN_55), 
                                        .CL(XLXN_56), 
                                        .CL_AC(XLXN_23), 
                                        .DORPC(XLXN_29), 
                                        .LD_AC(XLXN_24), 
                                        .LD_D(XLXN_22), 
                                        .LD_IR(XLXN_26), 
                                        .LD_PC(XLXN_53), 
                                        .MEM_EN(MEM_EN), 
                                        .PC_CNT(XLXN_54), 
                                        .RORW(RORW), 
                                        .S0(S0), 
                                        .S1(S1), 
                                        .S2(S2), 
                                        .S3(S3), 
                                        .S4(S4), 
                                        .S5(S5));
   Datapath_sch_MUSER_toy_sch  XLXI_6 (.ADDORSUB(XLXN_55), 
                                      .CLK(CLK), 
                                      .CL_AC(XLXN_23), 
                                      .CL_D(XLXN_56), 
                                      .CL_IR(XLXN_56), 
                                      .CL_PC(XLXN_56), 
                                      .COUNT(XLXN_54), 
                                      .DORPC(XLXN_29), 
                                      .D_IN(D_IN[7:0]), 
                                      .LD_AC(XLXN_24), 
                                      .LD_D(XLXN_22), 
                                      .LD_IR(XLXN_26), 
                                      .LD_PC(XLXN_53), 
                                      .A(ADDR[7:0]), 
                                      .D_OUT(D_OUT[7:0]), 
                                      .IR(IR[7:0]), 
                                      .ZERO(XLXN_59));
endmodule
