////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : counter_sch.vf
// /___/   /\     Timestamp : 02/07/2018 22:13:46
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog "C:/Users/zad65674/Documents/GitHub/Advanced-Digital/Project Folder/Xilinx Files/counter_sch.vf" -w "C:/Users/zad65674/Documents/GitHub/Advanced-Digital/Project Folder/Xilinx Files/counter_sch.sch"
//Design Name: counter_sch
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module ha_sch_MUSER_counter_sch(Ci, 
                                Xi, 
                                Cout, 
                                S);

    input Ci;
    input Xi;
   output Cout;
   output S;
   
   
   AND2  XLXI_1 (.I0(Xi), 
                .I1(Ci), 
                .O(Cout));
   XOR2  XLXI_2 (.I0(Xi), 
                .I1(Ci), 
                .O(S));
endmodule
`timescale 1ns / 1ps

module ha8_sch_MUSER_counter_sch(HA_IN, 
                                 HA_OUT);

    input [7:0] HA_IN;
   output [7:0] HA_OUT;
   
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   
   ha_sch_MUSER_counter_sch  XLXI_1 (.Ci(HA_IN[7]), 
                                    .Xi(XLXN_28), 
                                    .Cout(HA_OUT[7]), 
                                    .S());
   ha_sch_MUSER_counter_sch  XLXI_2 (.Ci(HA_IN[6]), 
                                    .Xi(XLXN_29), 
                                    .Cout(HA_OUT[6]), 
                                    .S(XLXN_28));
   ha_sch_MUSER_counter_sch  XLXI_3 (.Ci(HA_IN[5]), 
                                    .Xi(XLXN_30), 
                                    .Cout(HA_OUT[5]), 
                                    .S(XLXN_29));
   ha_sch_MUSER_counter_sch  XLXI_4 (.Ci(HA_IN[4]), 
                                    .Xi(XLXN_31), 
                                    .Cout(HA_OUT[4]), 
                                    .S(XLXN_30));
   ha_sch_MUSER_counter_sch  XLXI_5 (.Ci(HA_IN[3]), 
                                    .Xi(XLXN_32), 
                                    .Cout(HA_OUT[3]), 
                                    .S(XLXN_31));
   ha_sch_MUSER_counter_sch  XLXI_6 (.Ci(HA_IN[2]), 
                                    .Xi(XLXN_33), 
                                    .Cout(HA_OUT[2]), 
                                    .S(XLXN_32));
   ha_sch_MUSER_counter_sch  XLXI_7 (.Ci(HA_IN[1]), 
                                    .Xi(HA_IN[0]), 
                                    .Cout(HA_OUT[1]), 
                                    .S(XLXN_33));
   INV  XLXI_22 (.I(HA_IN[0]), 
                .O(HA_OUT[0]));
endmodule
`timescale 1ns / 1ps

module mux_MUSER_counter_sch(IN0, 
                             IN1, 
                             SEL, 
                             MUX_OUT);

    input IN0;
    input IN1;
    input SEL;
   output MUX_OUT;
   
   wire XLXN_2;
   wire XLXN_7;
   wire XLXN_13;
   
   AND2  XLXI_1 (.I0(XLXN_2), 
                .I1(IN0), 
                .O(XLXN_7));
   AND2  XLXI_2 (.I0(IN1), 
                .I1(SEL), 
                .O(XLXN_13));
   OR2  XLXI_3 (.I0(XLXN_13), 
               .I1(XLXN_7), 
               .O(MUX_OUT));
   INV  XLXI_4 (.I(SEL), 
               .O(XLXN_2));
endmodule
`timescale 1ns / 1ps

module mux8sch_MUSER_counter_sch(IN0, 
                                 IN1, 
                                 SEL, 
                                 MUX_OUT);

    input [7:0] IN0;
    input [7:0] IN1;
    input SEL;
   output [7:0] MUX_OUT;
   
   
   mux_MUSER_counter_sch  XLXI_1 (.IN0(IN0[0]), 
                                 .IN1(IN1[0]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[0]));
   mux_MUSER_counter_sch  XLXI_2 (.IN0(IN0[1]), 
                                 .IN1(IN1[1]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[1]));
   mux_MUSER_counter_sch  XLXI_3 (.IN0(IN0[2]), 
                                 .IN1(IN1[2]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[2]));
   mux_MUSER_counter_sch  XLXI_4 (.IN0(IN0[3]), 
                                 .IN1(IN1[3]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[3]));
   mux_MUSER_counter_sch  XLXI_5 (.IN0(IN0[4]), 
                                 .IN1(IN1[4]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[4]));
   mux_MUSER_counter_sch  XLXI_6 (.IN0(IN0[5]), 
                                 .IN1(IN1[5]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[5]));
   mux_MUSER_counter_sch  XLXI_7 (.IN0(IN0[6]), 
                                 .IN1(IN1[6]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[6]));
   mux_MUSER_counter_sch  XLXI_8 (.IN0(IN0[7]), 
                                 .IN1(IN1[7]), 
                                 .SEL(SEL), 
                                 .MUX_OUT(MUX_OUT[7]));
endmodule
`timescale 1ns / 1ps

module reg_sch_MUSER_counter_sch(CLK, 
                                 LOAD, 
                                 REG_IN, 
                                 RST, 
                                 REG_OUT);

    input CLK;
    input LOAD;
    input [7:0] REG_IN;
    input RST;
   output [7:0] REG_OUT;
   
   
   FDRE #( .INIT(1'b0) ) XLXI_3 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[7]), 
                .R(RST), 
                .Q(REG_OUT[7]));
   FDRE #( .INIT(1'b0) ) XLXI_5 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[6]), 
                .R(RST), 
                .Q(REG_OUT[6]));
   FDRE #( .INIT(1'b0) ) XLXI_6 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[5]), 
                .R(RST), 
                .Q(REG_OUT[5]));
   FDRE #( .INIT(1'b0) ) XLXI_7 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[4]), 
                .R(RST), 
                .Q(REG_OUT[4]));
   FDRE #( .INIT(1'b0) ) XLXI_8 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[3]), 
                .R(RST), 
                .Q(REG_OUT[3]));
   FDRE #( .INIT(1'b0) ) XLXI_9 (.C(CLK), 
                .CE(LOAD), 
                .D(REG_IN[2]), 
                .R(RST), 
                .Q(REG_OUT[2]));
   FDRE #( .INIT(1'b0) ) XLXI_16 (.C(CLK), 
                 .CE(LOAD), 
                 .D(REG_IN[1]), 
                 .R(RST), 
                 .Q(REG_OUT[1]));
   FDRE #( .INIT(1'b0) ) XLXI_17 (.C(CLK), 
                 .CE(LOAD), 
                 .D(REG_IN[0]), 
                 .R(RST), 
                 .Q(REG_OUT[0]));
endmodule
`timescale 1ns / 1ps

module counter_sch(CLK, 
                   COUNT, 
                   COUNT_IN, 
                   LOAD, 
                   RST, 
                   COUNT_OUT);

    input CLK;
    input COUNT;
    input [7:0] COUNT_IN;
    input LOAD;
    input RST;
   output [7:0] COUNT_OUT;
   
   wire XLXN_1;
   wire [7:0] XLXN_7;
   wire XLXN_8;
   wire XLXN_15;
   wire [7:0] XLXN_51;
   wire [7:0] COUNT_OUT_DUMMY;
   
   assign COUNT_OUT[7:0] = COUNT_OUT_DUMMY[7:0];
   OR2  XLXI_1 (.I0(COUNT), 
               .I1(LOAD), 
               .O(XLXN_15));
   AND2  XLXI_2 (.I0(COUNT), 
                .I1(XLXN_1), 
                .O(XLXN_8));
   INV  XLXI_3 (.I(LOAD), 
               .O(XLXN_1));
   reg_sch_MUSER_counter_sch  XLXI_5 (.CLK(CLK), 
                                     .LOAD(XLXN_15), 
                                     .REG_IN(XLXN_7[7:0]), 
                                     .RST(RST), 
                                     .REG_OUT(COUNT_OUT_DUMMY[7:0]));
   mux8sch_MUSER_counter_sch  XLXI_6 (.IN0(COUNT_IN[7:0]), 
                                     .IN1(XLXN_51[7:0]), 
                                     .SEL(XLXN_8), 
                                     .MUX_OUT(XLXN_7[7:0]));
   ha8_sch_MUSER_counter_sch  XLXI_10 (.HA_IN(COUNT_OUT_DUMMY[7:0]), 
                                      .HA_OUT(XLXN_51[7:0]));
endmodule
