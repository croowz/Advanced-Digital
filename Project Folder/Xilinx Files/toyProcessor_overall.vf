////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : toyProcessor_overall.vf
// /___/   /\     Timestamp : 03/02/2018 15:36:44
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog "C:/Users/rac71636/Documents/GitHub/Advanced-Digital/Project Folder/Xilinx Files/toyProcessor_overall.vf" -w C:/Users/rac71636/Desktop/toyProcessor_overall.sch
//Design Name: toyProcessor_overall
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module clk_signal_sch_MUSER_toyProcessor_overall(CLK, 
                                                 PUSH, 
                                                 SIG);

    input CLK;
    input PUSH;
   output SIG;
   
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire SIG_DUMMY;
   
   assign SIG = SIG_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_1 (.C(CLK), 
              .D(PUSH), 
              .Q(XLXN_3));
   INV  XLXI_2 (.I(XLXN_3), 
               .O(XLXN_4));
   AND2  XLXI_3 (.I0(SIG_DUMMY), 
                .I1(CLK), 
                .O(XLXN_6));
   AND2  XLXI_4 (.I0(XLXN_4), 
                .I1(PUSH), 
                .O(XLXN_5));
   OR2  XLXI_5 (.I0(XLXN_6), 
               .I1(XLXN_5), 
               .O(SIG_DUMMY));
endmodule
`timescale 1ns / 1ps

module BypassClk_MUSER_toyProcessor_overall(CLK, 
                                            OVERFLOW, 
                                            PUSH, 
                                            RESET, 
                                            Signalout);

    input CLK;
    input OVERFLOW;
    input PUSH;
    input RESET;
   output Signalout;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_8;
   wire XLXN_12;
   
   clk_signal_sch_MUSER_toyProcessor_overall  XLXI_1 (.CLK(CLK), 
                                                     .PUSH(PUSH), 
                                                     .SIG(XLXN_8));
   OR2  XLXI_2 (.I0(OVERFLOW), 
               .I1(XLXN_1), 
               .O(XLXN_12));
   OR2  XLXI_3 (.I0(XLXN_3), 
               .I1(XLXN_8), 
               .O(Signalout));
   AND2  XLXI_4 (.I0(XLXN_2), 
                .I1(CLK), 
                .O(XLXN_3));
   FDC #( .INIT(1'b0) ) XLXI_5 (.C(CLK), 
               .CLR(RESET), 
               .D(XLXN_12), 
               .Q(XLXN_1));
   INV  XLXI_9 (.I(XLXN_1), 
               .O(XLXN_2));
endmodule
`timescale 1ns / 1ps

module toyProcessor_overall(CLK, 
                            PUSH, 
                            RESET, 
                            Addr, 
                            D_IN, 
                            EN_L, 
                            EN_ML, 
                            EN_MR, 
                            EN_R, 
                            MEM_EN, 
                            Output, 
                            OVERFLOW, 
                            RW, 
                            seven_seg_out, 
                            S0, 
                            S1, 
                            S2, 
                            S3, 
                            S4, 
                            S5);

    input CLK;
    input PUSH;
    input RESET;
   output [7:0] Addr;
   output [7:0] D_IN;
   output EN_L;
   output EN_ML;
   output EN_MR;
   output EN_R;
   output MEM_EN;
   output [7:0] Output;
   output OVERFLOW;
   output RW;
   output [6:0] seven_seg_out;
   output S0;
   output S1;
   output S2;
   output S3;
   output S4;
   output S5;
   
   wire [6:0] L;
   wire [6:0] ML;
   wire [6:0] MR;
   wire [6:0] R;
   wire XLXN_8;
   wire XLXN_21;
   wire XLXN_155;
   wire [7:0] Output_DUMMY;
   wire OVERFLOW_DUMMY;
   wire [7:0] Addr_DUMMY;
   wire S0_DUMMY;
   wire RW_DUMMY;
   wire [7:0] D_IN_DUMMY;
   
   assign Addr[7:0] = Addr_DUMMY[7:0];
   assign D_IN[7:0] = D_IN_DUMMY[7:0];
   assign Output[7:0] = Output_DUMMY[7:0];
   assign OVERFLOW = OVERFLOW_DUMMY;
   assign RW = RW_DUMMY;
   assign S0 = S0_DUMMY;
   toy_sch  XLXI_1 (.CLK(XLXN_155), 
                   .D_IN(Output_DUMMY[7:0]), 
                   .OVERFLOW(OVERFLOW_DUMMY), 
                   .RESET(RESET), 
                   .ADDR(Addr_DUMMY[7:0]), 
                   .D_OUT(D_IN_DUMMY[7:0]), 
                   .MEM_EN(MEM_EN), 
                   .RORW(RW_DUMMY), 
                   .S0(S0_DUMMY), 
                   .S1(S1), 
                   .S2(S2), 
                   .S3(S3), 
                   .S4(S4), 
                   .S5(S5));
   mem_bootstrap_sch  XLXI_2 (.ADDR(Addr_DUMMY[7:0]), 
                             .CLK(XLXN_155), 
                             .COUNT(XLXN_8), 
                             .D_IN(D_IN_DUMMY[7:0]), 
                             .RST(RESET), 
                             .RW(RW_DUMMY), 
                             .SEL(XLXN_21), 
                             .D_OUT(Output_DUMMY[7:0]), 
                             .OVERFLOW(OVERFLOW_DUMMY));
   VCC  XLXI_3 (.P(XLXN_8));
   INV  XLXI_5 (.I(S0_DUMMY), 
               .O(XLXN_21));
   seven_seg_control_sch  XLXI_6 (.CLK(CLK), 
                                 .L(L[6:0]), 
                                 .ML(ML[6:0]), 
                                 .MR(MR[6:0]), 
                                 .R(R[6:0]), 
                                 .EN_L(EN_L), 
                                 .EN_ML(EN_ML), 
                                 .EN_MR(EN_MR), 
                                 .EN_R(EN_R), 
                                 .seven_seg_out(seven_seg_out[6:0]));
   bin_to_7seghex_sch  XLXI_7 (.a0(Addr_DUMMY[4]), 
                              .a1(Addr_DUMMY[5]), 
                              .a2(Addr_DUMMY[6]), 
                              .a3(Addr_DUMMY[7]), 
                              .SegA(L[0]), 
                              .SegB(L[1]), 
                              .SegC(L[2]), 
                              .SegD(L[3]), 
                              .SegE(L[4]), 
                              .SegF(L[5]), 
                              .SegG(L[6]));
   bin_to_7seghex_sch  XLXI_8 (.a0(Addr_DUMMY[0]), 
                              .a1(Addr_DUMMY[1]), 
                              .a2(Addr_DUMMY[2]), 
                              .a3(Addr_DUMMY[3]), 
                              .SegA(ML[0]), 
                              .SegB(ML[1]), 
                              .SegC(ML[2]), 
                              .SegD(ML[3]), 
                              .SegE(ML[4]), 
                              .SegF(ML[5]), 
                              .SegG(ML[6]));
   bin_to_7seghex_sch  XLXI_9 (.a0(Output_DUMMY[0]), 
                              .a1(Output_DUMMY[1]), 
                              .a2(Output_DUMMY[2]), 
                              .a3(Output_DUMMY[3]), 
                              .SegA(R[0]), 
                              .SegB(R[1]), 
                              .SegC(R[2]), 
                              .SegD(R[3]), 
                              .SegE(R[4]), 
                              .SegF(R[5]), 
                              .SegG(R[6]));
   bin_to_7seghex_sch  XLXI_10 (.a0(Output_DUMMY[4]), 
                               .a1(Output_DUMMY[5]), 
                               .a2(Output_DUMMY[6]), 
                               .a3(Output_DUMMY[7]), 
                               .SegA(MR[0]), 
                               .SegB(MR[1]), 
                               .SegC(MR[2]), 
                               .SegD(MR[3]), 
                               .SegE(MR[4]), 
                               .SegF(MR[5]), 
                               .SegG(MR[6]));
   BypassClk_MUSER_toyProcessor_overall  XLXI_26 (.CLK(CLK), 
                                                 .OVERFLOW(OVERFLOW_DUMMY), 
                                                 .PUSH(PUSH), 
                                                 .RESET(RESET), 
                                                 .Signalout(XLXN_155));
endmodule
